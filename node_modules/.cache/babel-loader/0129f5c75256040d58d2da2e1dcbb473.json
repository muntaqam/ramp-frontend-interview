{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useTransactionsByEmployee() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState(null);\n  const fetchById = useCallback(async employeeId => {\n    const data = await fetchWithCache(\"transactionsByEmployee\", {\n      employeeId\n    });\n    setTransactionsByEmployee(data);\n  }, [fetchWithCache]);\n\n  const updateTransactionApproval = (transactionId, newValue) => {\n    setTransactionsByEmployee(prevData => prevData ? prevData.map(transaction => transaction.id === transactionId ? { ...transaction,\n      approved: newValue\n    } : transaction) : prevData);\n  };\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null);\n  }, []);\n  return {\n    data: transactionsByEmployee,\n    loading,\n    fetchById,\n    invalidateData,\n    updateTransactionApproval\n  };\n}\n\n_s(useTransactionsByEmployee, \"kKvyfBKX5wcdmUqML83LxPYcyfE=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useTransactionsByEmployee","fetchWithCache","loading","transactionsByEmployee","setTransactionsByEmployee","fetchById","employeeId","data","updateTransactionApproval","transactionId","newValue","prevData","map","transaction","id","approved","invalidateData"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/hooks/useTransactionsByEmployee.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { RequestByEmployeeParams, Transaction } from \"../utils/types\"\nimport { TransactionsByEmployeeResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function useTransactionsByEmployee(): TransactionsByEmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [transactionsByEmployee, setTransactionsByEmployee] = useState<Transaction[] | null>(null)\n\n  const fetchById = useCallback(\n    async (employeeId: string) => {\n      const data = await fetchWithCache<Transaction[], RequestByEmployeeParams>(\n        \"transactionsByEmployee\",\n        {\n          employeeId,\n        }\n      )\n\n      setTransactionsByEmployee(data)\n    },\n    [fetchWithCache]\n  )\n\n  const updateTransactionApproval = (transactionId: string, newValue: boolean) => {\n    setTransactionsByEmployee((prevData) =>\n      prevData\n        ? prevData.map((transaction) =>\n          transaction.id === transactionId ? { ...transaction, approved: newValue } : transaction\n        )\n        : prevData\n    );\n  };\n\n\n  const invalidateData = useCallback(() => {\n    setTransactionsByEmployee(null)\n  }, [])\n\n  return { data: transactionsByEmployee, loading, fetchById, invalidateData, updateTransactionApproval };\n\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,yBAAT,GAAmE;EAAA;;EACxE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,sBAAD,EAAyBC,yBAAzB,IAAsDN,QAAQ,CAAuB,IAAvB,CAApE;EAEA,MAAMO,SAAS,GAAGR,WAAW,CAC3B,MAAOS,UAAP,IAA8B;IAC5B,MAAMC,IAAI,GAAG,MAAMN,cAAc,CAC/B,wBAD+B,EAE/B;MACEK;IADF,CAF+B,CAAjC;IAOAF,yBAAyB,CAACG,IAAD,CAAzB;EACD,CAV0B,EAW3B,CAACN,cAAD,CAX2B,CAA7B;;EAcA,MAAMO,yBAAyB,GAAG,CAACC,aAAD,EAAwBC,QAAxB,KAA8C;IAC9EN,yBAAyB,CAAEO,QAAD,IACxBA,QAAQ,GACJA,QAAQ,CAACC,GAAT,CAAcC,WAAD,IACbA,WAAW,CAACC,EAAZ,KAAmBL,aAAnB,GAAmC,EAAE,GAAGI,WAAL;MAAkBE,QAAQ,EAAEL;IAA5B,CAAnC,GAA4EG,WAD5E,CADI,GAIJF,QALmB,CAAzB;EAOD,CARD;;EAWA,MAAMK,cAAc,GAAGnB,WAAW,CAAC,MAAM;IACvCO,yBAAyB,CAAC,IAAD,CAAzB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEG,IAAI,EAAEJ,sBAAR;IAAgCD,OAAhC;IAAyCG,SAAzC;IAAoDW,cAApD;IAAoER;EAApE,CAAP;AAED;;GAnCeR,yB;UACsBD,c"},"metadata":{},"sourceType":"module"}