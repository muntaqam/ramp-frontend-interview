{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const [localTransactions, setLocalTransactions] = useState(transactions); // Log the initial transactions prop\n\n  console.log(\"Initial transactions prop:\", transactions); // Sync localTransactions with incoming transactions prop\n\n  useEffect(() => {\n    console.log(\"Updating localTransactions state from transactions prop:\", transactions);\n    setLocalTransactions(transactions);\n  }, [transactions]);\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    console.log(`setTransactionApproval called with transactionId=${transactionId}, newValue=${newValue}`); // Optimistically update the state\n\n    setLocalTransactions(prevTransactions => {\n      const updatedTransactions = prevTransactions.map(transaction => transaction.id === transactionId ? { ...transaction,\n        approved: newValue\n      } : transaction);\n      console.log(\"Optimistically updated localTransactions:\", updatedTransactions);\n      return updatedTransactions;\n    });\n\n    try {\n      // Send update to the backend\n      console.log(\"Sending backend update request...\");\n      await fetchWithoutCache(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue\n      });\n      console.log(\"Backend update succeeded for transactionId:\", transactionId);\n    } catch (error) {\n      console.error(\"Failed to update transaction approval:\", error); // Rollback the state if the backend update fails\n\n      setLocalTransactions(prevTransactions => {\n        const rolledBackTransactions = prevTransactions.map(transaction => transaction.id === transactionId ? { ...transaction,\n          approved: !newValue\n        } : transaction);\n        console.log(\"Rolled back localTransactions after failure:\", rolledBackTransactions);\n        return rolledBackTransactions;\n      });\n    }\n  }, [fetchWithoutCache]);\n\n  if (localTransactions === null) {\n    console.log(\"localTransactions is null, showing loading spinner.\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: localTransactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"VxAXseweVrJi2TL4JjeWV23sBJI=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useState","useEffect","useCallback","useCustomFetch","TransactionPane","Transactions","transactions","fetchWithoutCache","loading","localTransactions","setLocalTransactions","console","log","setTransactionApproval","transactionId","newValue","prevTransactions","updatedTransactions","map","transaction","id","approved","value","error","rolledBackTransactions"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalParams } from \"src/utils/types\";\nimport { TransactionsComponent, SetTransactionApprovalFunction } from \"./types\";\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch();\n  const [localTransactions, setLocalTransactions] = useState(transactions);\n\n  // Log the initial transactions prop\n  console.log(\"Initial transactions prop:\", transactions);\n\n  // Sync localTransactions with incoming transactions prop\n  useEffect(() => {\n    console.log(\"Updating localTransactions state from transactions prop:\", transactions);\n    setLocalTransactions(transactions);\n  }, [transactions]);\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      console.log(`setTransactionApproval called with transactionId=${transactionId}, newValue=${newValue}`);\n\n      // Optimistically update the state\n      setLocalTransactions((prevTransactions) => {\n        const updatedTransactions = prevTransactions!.map((transaction) =>\n          transaction.id === transactionId ? { ...transaction, approved: newValue } : transaction\n        );\n        console.log(\"Optimistically updated localTransactions:\", updatedTransactions);\n        return updatedTransactions;\n      });\n\n      try {\n        // Send update to the backend\n        console.log(\"Sending backend update request...\");\n        await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n          transactionId,\n          value: newValue,\n        });\n        console.log(\"Backend update succeeded for transactionId:\", transactionId);\n      } catch (error) {\n        console.error(\"Failed to update transaction approval:\", error);\n        // Rollback the state if the backend update fails\n        setLocalTransactions((prevTransactions) => {\n          const rolledBackTransactions = prevTransactions.map((transaction) =>\n            transaction.id === transactionId ? { ...transaction, approved: !newValue } : transaction\n          );\n          console.log(\"Rolled back localTransactions after failure:\", rolledBackTransactions);\n          return rolledBackTransactions;\n        });\n      }\n    },\n    [fetchWithoutCache]\n  );\n\n  if (localTransactions === null) {\n    console.log(\"localTransactions is null, showing loading spinner.\");\n    return <div className=\"RampLoading--container\">Loading...</div>;\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {localTransactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAIA,OAAO,MAAMC,YAAmC,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EACvE,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCL,cAAc,EAArD;EACA,MAAM,CAACM,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAACM,YAAD,CAA1D,CAFuE,CAIvE;;EACAK,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CN,YAA1C,EALuE,CAOvE;;EACAL,SAAS,CAAC,MAAM;IACdU,OAAO,CAACC,GAAR,CAAY,0DAAZ,EAAwEN,YAAxE;IACAI,oBAAoB,CAACJ,YAAD,CAApB;EACD,CAHQ,EAGN,CAACA,YAAD,CAHM,CAAT;EAKA,MAAMO,sBAAsB,GAAGX,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEY,aAAF;MAAiBC;IAAjB,CAAgC;IACrCJ,OAAO,CAACC,GAAR,CAAa,oDAAmDE,aAAc,cAAaC,QAAS,EAApG,EADqC,CAGrC;;IACAL,oBAAoB,CAAEM,gBAAD,IAAsB;MACzC,MAAMC,mBAAmB,GAAGD,gBAAgB,CAAEE,GAAlB,CAAuBC,WAAD,IAChDA,WAAW,CAACC,EAAZ,KAAmBN,aAAnB,GAAmC,EAAE,GAAGK,WAAL;QAAkBE,QAAQ,EAAEN;MAA5B,CAAnC,GAA4EI,WADlD,CAA5B;MAGAR,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDK,mBAAzD;MACA,OAAOA,mBAAP;IACD,CANmB,CAApB;;IAQA,IAAI;MACF;MACAN,OAAO,CAACC,GAAR,CAAY,mCAAZ;MACA,MAAML,iBAAiB,CAAqC,wBAArC,EAA+D;QACpFO,aADoF;QAEpFQ,KAAK,EAAEP;MAF6E,CAA/D,CAAvB;MAIAJ,OAAO,CAACC,GAAR,CAAY,6CAAZ,EAA2DE,aAA3D;IACD,CARD,CAQE,OAAOS,KAAP,EAAc;MACdZ,OAAO,CAACY,KAAR,CAAc,wCAAd,EAAwDA,KAAxD,EADc,CAEd;;MACAb,oBAAoB,CAAEM,gBAAD,IAAsB;QACzC,MAAMQ,sBAAsB,GAAGR,gBAAgB,CAACE,GAAjB,CAAsBC,WAAD,IAClDA,WAAW,CAACC,EAAZ,KAAmBN,aAAnB,GAAmC,EAAE,GAAGK,WAAL;UAAkBE,QAAQ,EAAE,CAACN;QAA7B,CAAnC,GAA6EI,WADhD,CAA/B;QAGAR,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA4DY,sBAA5D;QACA,OAAOA,sBAAP;MACD,CANmB,CAApB;IAOD;EACF,CAhCuC,EAiCxC,CAACjB,iBAAD,CAjCwC,CAA1C;;EAoCA,IAAIE,iBAAiB,KAAK,IAA1B,EAAgC;IAC9BE,OAAO,CAACC,GAAR,CAAY,qDAAZ;IACA,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGH,iBAAiB,CAACS,GAAlB,CAAuBC,WAAD,iBACrB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAEX,OAHX;MAIE,sBAAsB,EAAEK;IAJ1B,GACOM,WAAW,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CAlEM;;GAAMf,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}