{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const [localTransactions, setLocalTransactions] = useState(transactions);\n  const [approvedStates, setApprovedStates] = useState({});\n  useEffect(() => {\n    setLocalTransactions(transactions);\n  }, [transactions]);\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    setApprovedStates(prevState => ({ ...prevState,\n      [transactionId]: newValue\n    }));\n\n    try {\n      await fetchWithoutCache(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue\n      });\n    } catch (error) {\n      console.error(\"Failed to update transaction approval:\", error); // Rollback if error occurs\n\n      setApprovedStates(prevState => ({ ...prevState,\n        [transactionId]: !newValue\n      }));\n    }\n  }, [fetchWithoutCache]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: localTransactions.map(transaction => {\n      var _approvedStates$trans;\n\n      return /*#__PURE__*/_jsxDEV(TransactionPane, {\n        transaction: { ...transaction,\n          approved: (_approvedStates$trans = approvedStates[transaction.id]) !== null && _approvedStates$trans !== void 0 ? _approvedStates$trans : transaction.approved\n        },\n        loading: loading,\n        setTransactionApproval: setTransactionApproval\n      }, transaction.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"zHhAqhcTSiI5Vykxlb8mk8Pj31s=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useState","useEffect","useCallback","useCustomFetch","TransactionPane","Transactions","transactions","fetchWithoutCache","loading","localTransactions","setLocalTransactions","approvedStates","setApprovedStates","setTransactionApproval","transactionId","newValue","prevState","value","error","console","map","transaction","approved","id"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalParams } from \"src/utils/types\";\nimport { TransactionsComponent, SetTransactionApprovalFunction } from \"./types\";\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch();\n  const [localTransactions, setLocalTransactions] = useState(transactions);\n  const [approvedStates, setApprovedStates] = useState<{ [id: string]: boolean }>({});\n\n  useEffect(() => {\n    setLocalTransactions(transactions);\n  }, [transactions]);\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      setApprovedStates((prevState) => ({\n        ...prevState,\n        [transactionId]: newValue,\n      }));\n\n      try {\n        await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n          transactionId,\n          value: newValue,\n        });\n      } catch (error) {\n        console.error(\"Failed to update transaction approval:\", error);\n        // Rollback if error occurs\n        setApprovedStates((prevState) => ({\n          ...prevState,\n          [transactionId]: !newValue,\n        }));\n      }\n    },\n    [fetchWithoutCache]\n  );\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {localTransactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={{ ...transaction, approved: approvedStates[transaction.id] ?? transaction.approved }}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAIA,OAAO,MAAMC,YAAmC,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EACvE,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCL,cAAc,EAArD;EACA,MAAM,CAACM,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAACM,YAAD,CAA1D;EACA,MAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAA4B,EAA5B,CAApD;EAEAC,SAAS,CAAC,MAAM;IACdS,oBAAoB,CAACJ,YAAD,CAApB;EACD,CAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;EAIA,MAAMO,sBAAsB,GAAGX,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEY,aAAF;MAAiBC;IAAjB,CAAgC;IACrCH,iBAAiB,CAAEI,SAAD,KAAgB,EAChC,GAAGA,SAD6B;MAEhC,CAACF,aAAD,GAAiBC;IAFe,CAAhB,CAAD,CAAjB;;IAKA,IAAI;MACF,MAAMR,iBAAiB,CAAqC,wBAArC,EAA+D;QACpFO,aADoF;QAEpFG,KAAK,EAAEF;MAF6E,CAA/D,CAAvB;IAID,CALD,CAKE,OAAOG,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAc,wCAAd,EAAwDA,KAAxD,EADc,CAEd;;MACAN,iBAAiB,CAAEI,SAAD,KAAgB,EAChC,GAAGA,SAD6B;QAEhC,CAACF,aAAD,GAAiB,CAACC;MAFc,CAAhB,CAAD,CAAjB;IAID;EACF,CApBuC,EAqBxC,CAACR,iBAAD,CArBwC,CAA1C;EAwBA,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGE,iBAAiB,CAACW,GAAlB,CAAuBC,WAAD;MAAA;;MAAA,oBACrB,QAAC,eAAD;QAEE,WAAW,EAAE,EAAE,GAAGA,WAAL;UAAkBC,QAAQ,2BAAEX,cAAc,CAACU,WAAW,CAACE,EAAb,CAAhB,yEAAoCF,WAAW,CAACC;QAA1E,CAFf;QAGE,OAAO,EAAEd,OAHX;QAIE,sBAAsB,EAAEK;MAJ1B,GACOQ,WAAW,CAACE,EADnB;QAAA;QAAA;QAAA;MAAA,QADqB;IAAA,CAAtB;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA7CM;;GAAMlB,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}