{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactions, setTransactions] = useState([]); // Keep track of transactions\n  // Memoize the transactions to avoid recalculating unnecessarily\n\n  const allTransactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]); // Load all transactions (including pagination)\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData(); // Clear any employee-specific data\n\n    await employeeUtils.fetchAll(); // Fetch employee data\n\n    setIsLoading(false);\n    const newPaginatedTransactions = await paginatedTransactionsUtils.fetchAll();\n\n    if (newPaginatedTransactions !== null && newPaginatedTransactions !== void 0 && newPaginatedTransactions.data) {\n      // Append new transactions to the existing list instead of replacing\n      setTransactions(prevTransactions => [...prevTransactions, ...newPaginatedTransactions.data]);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]); // Load transactions filtered by employee\n\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData(); // Clear paginated transactions data\n\n    setTransactions([]); // Clear transactions when filtering by employee\n\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n\n    if (transactionsByEmployee) {\n      setTransactions(transactionsByEmployee); // Set transactions based on employee\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, transactionsByEmployee]); // Load all transactions initially when employees data is not null\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          // bug 3 - check if the id is null or empty employee\n          if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n            // bug three --- load if empty\n            await loadAllTransactions();\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions.length > 0 ? transactions : allTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), transactions !== null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) == null,\n          onClick: async () => {\n            // Bug 4: Clicking on View More button not showing correct data\n            // Expected: Initial transactions plus new transactions are shown on the page\n            // Actual: New transactions replace initial transactions, losing initial transactions\n            await loadAllTransactions(); // Load more transactions and append\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"XawVVVzl5k19cuXI17usyhSdYFM=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","setTransactions","allTransactions","loadAllTransactions","invalidateData","fetchAll","newPaginatedTransactions","prevTransactions","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue","length","nextPage"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactions, setTransactions] = useState([]); // Keep track of transactions\n\n  // Memoize the transactions to avoid recalculating unnecessarily\n  const allTransactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  );\n\n  // Load all transactions (including pagination)\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData(); // Clear any employee-specific data\n\n    await employeeUtils.fetchAll(); // Fetch employee data\n    setIsLoading(false);\n\n    const newPaginatedTransactions = await paginatedTransactionsUtils.fetchAll();\n    if (newPaginatedTransactions?.data) {\n      // Append new transactions to the existing list instead of replacing\n      setTransactions((prevTransactions) => [\n        ...prevTransactions,\n        ...newPaginatedTransactions.data,\n      ]);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  // Load transactions filtered by employee\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId) => {\n      paginatedTransactionsUtils.invalidateData(); // Clear paginated transactions data\n      setTransactions([]); // Clear transactions when filtering by employee\n\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n      if (transactionsByEmployee) {\n        setTransactions(transactionsByEmployee); // Set transactions based on employee\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils, transactionsByEmployee]\n  );\n\n  // Load all transactions initially when employees data is not null\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            // bug 3 - check if the id is null or empty employee\n            if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n              // bug three --- load if empty\n              await loadAllTransactions();\n              return;\n            }\n\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions.length > 0 ? transactions : allTransactions} />\n\n          {transactions !== null && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading || paginatedTransactions?.nextPage == null}\n              onClick={async () => {\n                // Bug 4: Clicking on View More button not showing correct data\n                // Expected: Initial transactions plus new transactions are shown on the page\n                // Actual: New transactions replace initial transactions, losing initial transactions\n                await loadAllTransactions(); // Load more transactions and append\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}