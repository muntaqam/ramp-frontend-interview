{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    setPaginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    setTransactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const updateTransactionApproval = useCallback((transactionId, newValue) => {\n    if (paginatedTransactions) {\n      // Update the paginatedTransactions state directly\n      setPaginatedTransactions(prev => ({ ...prev,\n        data: prev.data.map(transaction => transaction.id === transactionId ? { ...transaction,\n          approved: newValue\n        } : transaction)\n      }));\n    }\n\n    if (transactionsByEmployee) {\n      // Update the transactionsByEmployee state directly\n      setTransactionsByEmployee(prev => prev.map(transaction => transaction.id === transactionId ? { ...transaction,\n        approved: newValue\n      } : transaction));\n    }\n  }, [paginatedTransactions, transactionsByEmployee, setPaginatedTransactions, setTransactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          updateTransactionApproval: updateTransactionApproval\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && transactionsByEmployee === null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await paginatedTransactionsUtils.fetchAll();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6OevkX5YTDiOlEjhIXdbGqVLaLQ=\", true);\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["App","data","employees","employeeUtils","useEmployees","paginatedTransactions","setPaginatedTransactions","paginatedTransactionsUtils","usePaginatedTransactions","transactionsByEmployee","setTransactionsByEmployee","transactionsByEmployeeUtils","useTransactionsByEmployee","isLoading","setIsLoading","useState","transactions","useMemo","updateTransactionApproval","useCallback","transactionId","newValue","prev","map","transaction","id","approved","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","useEffect","loading","EMPTY_EMPLOYEE","item","value","label","firstName","lastName","nextPage"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["export function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, setPaginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, setTransactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  );\n\n  const updateTransactionApproval = useCallback((transactionId, newValue) => {\n    if (paginatedTransactions) {\n      // Update the paginatedTransactions state directly\n      setPaginatedTransactions((prev) => ({\n        ...prev,\n        data: prev.data.map((transaction) =>\n          transaction.id === transactionId ? { ...transaction, approved: newValue } : transaction\n        ),\n      }));\n    }\n\n    if (transactionsByEmployee) {\n      // Update the transactionsByEmployee state directly\n      setTransactionsByEmployee((prev) =>\n        prev.map((transaction) =>\n          transaction.id === transactionId ? { ...transaction, approved: newValue } : transaction\n        )\n      );\n    }\n  }, [paginatedTransactions, transactionsByEmployee, setPaginatedTransactions, setTransactionsByEmployee]);\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions();\n              return;\n            }\n\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} updateTransactionApproval={updateTransactionApproval} />\n\n          {paginatedTransactions?.data && paginatedTransactions?.nextPage !== null && transactionsByEmployee === null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await paginatedTransactionsUtils.fetchAll();\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":";;;;AAAA,OAAO,SAASA,GAAT,GAAe;EAAA;;EACpB,MAAM;IAAEC,IAAI,EAAEC,SAAR;IAAmB,GAAGC;EAAtB,IAAwCC,YAAY,EAA1D;EACA,MAAM;IAAEH,IAAI,EAAEI,qBAAR;IAA+BC,wBAA/B;IAAyD,GAAGC;EAA5D,IAA2FC,wBAAwB,EAAzH;EACA,MAAM;IAAEP,IAAI,EAAEQ,sBAAR;IAAgCC,yBAAhC;IAA2D,GAAGC;EAA9D,IAA8FC,yBAAyB,EAA7H;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,KAAD,CAA1C;EAEA,MAAMC,YAAY,GAAGC,OAAO,CAC1B;IAAA;;IAAA,wCAAMZ,qBAAN,aAAMA,qBAAN,uBAAMA,qBAAqB,CAAEJ,IAA7B,yEAAqCQ,sBAArC,uCAA+D,IAA/D;EAAA,CAD0B,EAE1B,CAACJ,qBAAD,EAAwBI,sBAAxB,CAF0B,CAA5B;EAKA,MAAMS,yBAAyB,GAAGC,WAAW,CAAC,CAACC,aAAD,EAAgBC,QAAhB,KAA6B;IACzE,IAAIhB,qBAAJ,EAA2B;MACzB;MACAC,wBAAwB,CAAEgB,IAAD,KAAW,EAClC,GAAGA,IAD+B;QAElCrB,IAAI,EAAEqB,IAAI,CAACrB,IAAL,CAAUsB,GAAV,CAAeC,WAAD,IAClBA,WAAW,CAACC,EAAZ,KAAmBL,aAAnB,GAAmC,EAAE,GAAGI,WAAL;UAAkBE,QAAQ,EAAEL;QAA5B,CAAnC,GAA4EG,WADxE;MAF4B,CAAX,CAAD,CAAxB;IAMD;;IAED,IAAIf,sBAAJ,EAA4B;MAC1B;MACAC,yBAAyB,CAAEY,IAAD,IACxBA,IAAI,CAACC,GAAL,CAAUC,WAAD,IACPA,WAAW,CAACC,EAAZ,KAAmBL,aAAnB,GAAmC,EAAE,GAAGI,WAAL;QAAkBE,QAAQ,EAAEL;MAA5B,CAAnC,GAA4EG,WAD9E,CADuB,CAAzB;IAKD;EACF,CAnB4C,EAmB1C,CAACnB,qBAAD,EAAwBI,sBAAxB,EAAgDH,wBAAhD,EAA0EI,yBAA1E,CAnB0C,CAA7C;EAqBA,MAAMiB,mBAAmB,GAAGR,WAAW,CAAC,YAAY;IAClDL,YAAY,CAAC,IAAD,CAAZ;IACAH,2BAA2B,CAACiB,cAA5B;IAEA,MAAMzB,aAAa,CAAC0B,QAAd,EAAN;IACAf,YAAY,CAAC,KAAD,CAAZ;IACA,MAAMP,0BAA0B,CAACsB,QAA3B,EAAN;EACD,CAPsC,EAOpC,CAAC1B,aAAD,EAAgBI,0BAAhB,EAA4CI,2BAA5C,CAPoC,CAAvC;EASA,MAAMmB,0BAA0B,GAAGX,WAAW,CAC5C,MAAOY,UAAP,IAA8B;IAC5BxB,0BAA0B,CAACqB,cAA3B;IACA,MAAMjB,2BAA2B,CAACqB,SAA5B,CAAsCD,UAAtC,CAAN;EACD,CAJ2C,EAK5C,CAACxB,0BAAD,EAA6BI,2BAA7B,CAL4C,CAA9C;EAQAsB,SAAS,CAAC,MAAM;IACd,IAAI/B,SAAS,KAAK,IAAd,IAAsB,CAACC,aAAa,CAAC+B,OAAzC,EAAkD;MAChDP,mBAAmB;IACpB;EACF,CAJQ,EAIN,CAACxB,aAAa,CAAC+B,OAAf,EAAwBhC,SAAxB,EAAmCyB,mBAAnC,CAJM,CAAT;EAMA,oBACE,QAAC,QAAD;IAAA,uBACE;MAAM,SAAS,EAAC,eAAhB;MAAA,wBACE,QAAC,YAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAGE;QAAI,SAAS,EAAC;MAAd;QAAA;QAAA;QAAA;MAAA,QAHF,eAKE,QAAC,WAAD;QACE,SAAS,EAAEd,SADb;QAEE,YAAY,EAAEsB,cAFhB;QAGE,KAAK,EAAEjC,SAAS,KAAK,IAAd,GAAqB,EAArB,GAA0B,CAACiC,cAAD,EAAiB,GAAGjC,SAApB,CAHnC;QAIE,KAAK,EAAC,oBAJR;QAKE,YAAY,EAAC,mBALf;QAME,SAAS,EAAGkC,IAAD,KAAW;UACpBC,KAAK,EAAED,IAAI,CAACX,EADQ;UAEpBa,KAAK,EAAEF,IAAI,KAAKD,cAAT,GAA0B,eAA1B,GAA6C,GAAEC,IAAI,CAACG,SAAU,IAAGH,IAAI,CAACI,QAAS;QAFlE,CAAX,CANb;QAUE,QAAQ,EAAE,MAAOnB,QAAP,IAAoB;UAC5B,IAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,CAACI,EAAT,KAAgBU,cAAc,CAACV,EAAxD,EAA4D;YAC1D,MAAME,mBAAmB,EAAzB;YACA;UACD;;UAED,MAAMG,0BAA0B,CAACT,QAAQ,CAACI,EAAV,CAAhC;QACD;MAjBH;QAAA;QAAA;QAAA;MAAA,QALF,eAyBE;QAAK,SAAS,EAAC;MAAf;QAAA;QAAA;QAAA;MAAA,QAzBF,eA2BE;QAAK,SAAS,EAAC,UAAf;QAAA,wBACE,QAAC,YAAD;UAAc,YAAY,EAAET,YAA5B;UAA0C,yBAAyB,EAAEE;QAArE;UAAA;UAAA;UAAA;QAAA,QADF,EAGG,CAAAb,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,YAAAA,qBAAqB,CAAEJ,IAAvB,KAA+B,CAAAI,qBAAqB,SAArB,IAAAA,qBAAqB,WAArB,YAAAA,qBAAqB,CAAEoC,QAAvB,MAAoC,IAAnE,IAA2EhC,sBAAsB,KAAK,IAAtG,iBACC;UACE,SAAS,EAAC,YADZ;UAEE,QAAQ,EAAEF,0BAA0B,CAAC2B,OAFvC;UAGE,OAAO,EAAE,YAAY;YACnB,MAAM3B,0BAA0B,CAACsB,QAA3B,EAAN;UACD,CALH;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAJJ;MAAA;QAAA;QAAA;QAAA;MAAA,QA3BF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA+CD;;GAtGe7B,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}