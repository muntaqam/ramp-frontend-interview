{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  _s();\n\n  let {\n    transaction,\n    loading: parentLoading,\n    // Loading from parent - initial data loading\n    setTransactionApproval: consumerSetTransactionApproval\n  } = _ref;\n  const [approved, setApproved] = useState(transaction.approved);\n  const [isProcessing, setIsProcessing] = useState(false); // Synchronize state with transaction prop\n\n  useEffect(() => {\n    setApproved(transaction.approved);\n  }, [transaction.approved]); // Handle checkbox change\n\n  const handleCheckboxChange = newValue => {\n    // Optimistic UI update: Set approved to the new value immediately\n    setApproved(newValue);\n    setIsProcessing(true); // Make API call to set approval status\n\n    consumerSetTransactionApproval({\n      transactionId: transaction.id,\n      newValue\n    }).catch(error => {\n      console.error(\"Failed to set transaction approval:\", error); // Roll back UI state if the API call fails\n\n      setApproved(!newValue);\n    }).finally(() => {\n      setIsProcessing(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: transaction.merchant\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: approved,\n      disabled: parentLoading // Only disable when parent is loading initially\n      ,\n      onChange: handleCheckboxChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LoadingSpinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 24\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionPane, \"0Tg0BVyHYcDz/OC3RPV8naWmOjk=\");\n\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["useState","useEffect","InputCheckbox","TransactionPane","transaction","loading","parentLoading","setTransactionApproval","consumerSetTransactionApproval","approved","setApproved","isProcessing","setIsProcessing","handleCheckboxChange","newValue","transactionId","id","catch","error","console","finally","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","Intl","NumberFormat","style","currency"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport { TransactionPaneComponent } from \"./types\";\n\nexport const TransactionPane: TransactionPaneComponent = ({\n  transaction,\n  loading: parentLoading, // Loading from parent - initial data loading\n  setTransactionApproval: consumerSetTransactionApproval,\n}) => {\n  const [approved, setApproved] = useState(transaction.approved);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Synchronize state with transaction prop\n  useEffect(() => {\n    setApproved(transaction.approved);\n  }, [transaction.approved]);\n\n  // Handle checkbox change\n  const handleCheckboxChange = (newValue: boolean) => {\n    // Optimistic UI update: Set approved to the new value immediately\n    setApproved(newValue);\n    setIsProcessing(true);\n\n    // Make API call to set approval status\n    consumerSetTransactionApproval({\n      transactionId: transaction.id,\n      newValue,\n    })\n      .catch((error) => {\n        console.error(\"Failed to set transaction approval:\", error);\n        // Roll back UI state if the API call fails\n        setApproved(!newValue);\n      })\n      .finally(() => {\n        setIsProcessing(false);\n      });\n  };\n\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant}</p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={approved}\n        disabled={parentLoading} // Only disable when parent is loading initially\n        onChange={handleCheckboxChange}\n      />\n      {isProcessing && <div className=\"LoadingSpinner\">Loading...</div>} {/* Show spinner optionally if desired */}\n    </div>\n  );\n};\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AAGA,OAAO,MAAMC,eAAyC,GAAG,QAInD;EAAA;;EAAA,IAJoD;IACxDC,WADwD;IAExDC,OAAO,EAAEC,aAF+C;IAEhC;IACxBC,sBAAsB,EAAEC;EAHgC,CAIpD;EACJ,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAACI,WAAW,CAACK,QAAb,CAAxC;EACA,MAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,KAAD,CAAhD,CAFI,CAIJ;;EACAC,SAAS,CAAC,MAAM;IACdS,WAAW,CAACN,WAAW,CAACK,QAAb,CAAX;EACD,CAFQ,EAEN,CAACL,WAAW,CAACK,QAAb,CAFM,CAAT,CALI,CASJ;;EACA,MAAMI,oBAAoB,GAAIC,QAAD,IAAuB;IAClD;IACAJ,WAAW,CAACI,QAAD,CAAX;IACAF,eAAe,CAAC,IAAD,CAAf,CAHkD,CAKlD;;IACAJ,8BAA8B,CAAC;MAC7BO,aAAa,EAAEX,WAAW,CAACY,EADE;MAE7BF;IAF6B,CAAD,CAA9B,CAIGG,KAJH,CAIUC,KAAD,IAAW;MAChBC,OAAO,CAACD,KAAR,CAAc,qCAAd,EAAqDA,KAArD,EADgB,CAEhB;;MACAR,WAAW,CAAC,CAACI,QAAF,CAAX;IACD,CARH,EASGM,OATH,CASW,MAAM;MACbR,eAAe,CAAC,KAAD,CAAf;IACD,CAXH;EAYD,CAlBD;;EAoBA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,UAAyBR,WAAW,CAACiB;MAArC;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBnB,WAAW,CAACoB,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGpB,WAAW,CAACqB,QAAZ,CAAqBC,SADxB,OACoCtB,WAAW,CAACqB,QAAZ,CAAqBE,QADzD,SACsEvB,WAAW,CAACwB,IADlF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAQE,QAAC,aAAD;MACE,EAAE,EAAExB,WAAW,CAACY,EADlB;MAEE,OAAO,EAAEP,QAFX;MAGE,QAAQ,EAAEH,aAHZ,CAG2B;MAH3B;MAIE,QAAQ,EAAEO;IAJZ;MAAA;MAAA;MAAA;IAAA,QARF,EAcGF,YAAY,iBAAI;MAAK,SAAS,EAAC,gBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAdnB;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD,CApDM;;GAAMR,e;;KAAAA,e;AAsDb,MAAMmB,cAAc,GAAG,IAAIO,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}