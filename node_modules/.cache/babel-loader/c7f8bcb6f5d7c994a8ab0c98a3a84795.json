{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { TransactionPane } from \"./components/TransactionPane\";\nimport { Instructions } from \"./components/Instructions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState([]);\n  const transactions = useMemo(() => allTransactions.length > 0 ? allTransactions : transactionsByEmployee, [allTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    const newPaginatedTransactions = await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n\n    if (newPaginatedTransactions !== null && newPaginatedTransactions !== void 0 && newPaginatedTransactions.data) {\n      setAllTransactions(prevTransactions => [...prevTransactions, ...newPaginatedTransactions.data]);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    setIsLoading(true);\n    const employeeTransactions = await transactionsByEmployeeUtils.fetchById(employeeId);\n    setIsLoading(false);\n\n    if (employeeTransactions) {\n      setAllTransactions(employeeTransactions);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          } else if (newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampLoading--container\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this) : transactions === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"No transactions found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            \"data-testid\": \"transaction-container\",\n            children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n              transaction: transaction\n            }, transaction.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) != null && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"RampButton\",\n            disabled: paginatedTransactionsUtils.loading,\n            onClick: async () => {\n              await loadAllTransactions();\n            },\n            children: \"View More\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Pt4IgvPyp/Y9mQ1ItXpuNPGmdRg=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","TransactionPane","Instructions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","transactions","length","loadAllTransactions","invalidateData","fetchAll","newPaginatedTransactions","prevTransactions","loadTransactionsByEmployee","employeeId","employeeTransactions","fetchById","loading","item","value","id","label","firstName","lastName","newValue","map","transaction","nextPage"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Employee } from \"./utils/types\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { TransactionPane } from \"./components/TransactionPane\";\nimport { Instructions } from \"./components/Instructions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState([]);\n\n  const transactions = useMemo(\n    () => allTransactions.length > 0 ? allTransactions : transactionsByEmployee,\n    [allTransactions, transactionsByEmployee]\n  );\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    const newPaginatedTransactions = await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n\n    if (newPaginatedTransactions?.data) {\n      setAllTransactions((prevTransactions) => [\n        ...prevTransactions,\n        ...newPaginatedTransactions.data,\n      ]);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      setIsLoading(true);\n      const employeeTransactions = await transactionsByEmployeeUtils.fetchById(employeeId);\n      setIsLoading(false);\n      if (employeeTransactions) {\n        setAllTransactions(employeeTransactions);\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return;\n            } else if (newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions();\n            } else {\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {isLoading ? (\n            <div className=\"RampLoading--container\">Loading...</div>\n          ) : transactions === null ? (\n            <div>No transactions found.</div>\n          ) : (\n            <Fragment>\n              <div data-testid=\"transaction-container\">\n                {transactions.map((transaction) => (\n                  <TransactionPane key={transaction.id} transaction={transaction} />\n                ))}\n              </div>\n              {paginatedTransactions?.nextPage != null && (\n                <button\n                  className=\"RampButton\"\n                  disabled={paginatedTransactionsUtils.loading}\n                  onClick={async () => {\n                    await loadAllTransactions();\n                  }}\n                >\n                  View More\n                </button>\n              )}\n            </Fragment>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}