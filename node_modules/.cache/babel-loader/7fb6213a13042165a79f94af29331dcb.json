{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const [localTransactions, setLocalTransactions] = useState(transactions); // Function to reload transactions from the backend\n\n  const reloadTransactions = useCallback(async () => {\n    console.log(\"Reloading transactions...\");\n\n    try {\n      const latestTransactions = await fetchWithoutCache(\"getTransactions\");\n      setLocalTransactions(latestTransactions);\n      console.log(\"Transactions reloaded:\", latestTransactions);\n    } catch (error) {\n      console.error(\"Failed to reload transactions:\", error);\n    }\n  }, [fetchWithoutCache]);\n  useEffect(() => {\n    setLocalTransactions(transactions);\n  }, [transactions]);\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    console.log(`setTransactionApproval called with transactionId=${transactionId}, newValue=${newValue}`);\n\n    try {\n      // Send update to the backend\n      console.log(\"Sending backend update request...\");\n      await fetchWithoutCache(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue\n      });\n      console.log(\"Backend update succeeded for transactionId:\", transactionId); // Reload transactions after successful update\n\n      await reloadTransactions();\n    } catch (error) {\n      console.error(\"Failed to update transaction approval:\", error);\n    }\n  }, [fetchWithoutCache, reloadTransactions]);\n\n  if (localTransactions === null) {\n    console.log(\"localTransactions is null, showing loading spinner.\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: localTransactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"AuL8Oa4ElewlfBlnPQSA6bjrRio=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useState","useEffect","useCallback","useCustomFetch","TransactionPane","Transactions","transactions","fetchWithoutCache","loading","localTransactions","setLocalTransactions","reloadTransactions","console","log","latestTransactions","error","setTransactionApproval","transactionId","newValue","value","map","transaction","id"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalParams } from \"src/utils/types\";\nimport { TransactionsComponent, SetTransactionApprovalFunction } from \"./types\";\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch();\n  const [localTransactions, setLocalTransactions] = useState(transactions);\n\n  // Function to reload transactions from the backend\n  const reloadTransactions = useCallback(async () => {\n    console.log(\"Reloading transactions...\");\n    try {\n      const latestTransactions = await fetchWithoutCache(\"getTransactions\");\n      setLocalTransactions(latestTransactions);\n      console.log(\"Transactions reloaded:\", latestTransactions);\n    } catch (error) {\n      console.error(\"Failed to reload transactions:\", error);\n    }\n  }, [fetchWithoutCache]);\n\n  useEffect(() => {\n    setLocalTransactions(transactions);\n  }, [transactions]);\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      console.log(`setTransactionApproval called with transactionId=${transactionId}, newValue=${newValue}`);\n\n      try {\n        // Send update to the backend\n        console.log(\"Sending backend update request...\");\n        await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n          transactionId,\n          value: newValue,\n        });\n        console.log(\"Backend update succeeded for transactionId:\", transactionId);\n\n        // Reload transactions after successful update\n        await reloadTransactions();\n      } catch (error) {\n        console.error(\"Failed to update transaction approval:\", error);\n      }\n    },\n    [fetchWithoutCache, reloadTransactions]\n  );\n\n  if (localTransactions === null) {\n    console.log(\"localTransactions is null, showing loading spinner.\");\n    return <div className=\"RampLoading--container\">Loading...</div>;\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {localTransactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAIA,OAAO,MAAMC,YAAmC,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EACvE,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCL,cAAc,EAArD;EACA,MAAM,CAACM,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAACM,YAAD,CAA1D,CAFuE,CAIvE;;EACA,MAAMK,kBAAkB,GAAGT,WAAW,CAAC,YAAY;IACjDU,OAAO,CAACC,GAAR,CAAY,2BAAZ;;IACA,IAAI;MACF,MAAMC,kBAAkB,GAAG,MAAMP,iBAAiB,CAAC,iBAAD,CAAlD;MACAG,oBAAoB,CAACI,kBAAD,CAApB;MACAF,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,kBAAtC;IACD,CAJD,CAIE,OAAOC,KAAP,EAAc;MACdH,OAAO,CAACG,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;IACD;EACF,CATqC,EASnC,CAACR,iBAAD,CATmC,CAAtC;EAWAN,SAAS,CAAC,MAAM;IACdS,oBAAoB,CAACJ,YAAD,CAApB;EACD,CAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;EAIA,MAAMU,sBAAsB,GAAGd,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEe,aAAF;MAAiBC;IAAjB,CAAgC;IACrCN,OAAO,CAACC,GAAR,CAAa,oDAAmDI,aAAc,cAAaC,QAAS,EAApG;;IAEA,IAAI;MACF;MACAN,OAAO,CAACC,GAAR,CAAY,mCAAZ;MACA,MAAMN,iBAAiB,CAAqC,wBAArC,EAA+D;QACpFU,aADoF;QAEpFE,KAAK,EAAED;MAF6E,CAA/D,CAAvB;MAIAN,OAAO,CAACC,GAAR,CAAY,6CAAZ,EAA2DI,aAA3D,EAPE,CASF;;MACA,MAAMN,kBAAkB,EAAxB;IACD,CAXD,CAWE,OAAOI,KAAP,EAAc;MACdH,OAAO,CAACG,KAAR,CAAc,wCAAd,EAAwDA,KAAxD;IACD;EACF,CAlBuC,EAmBxC,CAACR,iBAAD,EAAoBI,kBAApB,CAnBwC,CAA1C;;EAsBA,IAAIF,iBAAiB,KAAK,IAA1B,EAAgC;IAC9BG,OAAO,CAACC,GAAR,CAAY,qDAAZ;IACA,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGJ,iBAAiB,CAACW,GAAlB,CAAuBC,WAAD,iBACrB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAEb,OAHX;MAIE,sBAAsB,EAAEQ;IAJ1B,GACOK,WAAW,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA3DM;;GAAMjB,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}