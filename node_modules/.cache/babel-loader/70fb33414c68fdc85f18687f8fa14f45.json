{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { TransactionPane } from \"./components/Transactions/TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState([]); // UseMemo to derive transactions from accumulated data\n\n  const transactions = useMemo(() => allTransactions.length > 0 ? allTransactions : null, [allTransactions]); // Load all transactions initially and on View More\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await paginatedTransactionsUtils.fetchAll(); // Fetch the next page of transactions\n\n    const newTransactions = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data;\n\n    if (newTransactions) {\n      setAllTransactions(prevTransactions => [...prevTransactions, ...newTransactions]);\n    }\n\n    setIsLoading(false);\n  }, [paginatedTransactions, paginatedTransactionsUtils, transactionsByEmployeeUtils]); // Load transactions by employee\n\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    setAllTransactions([]); // Clear the list when filtering by employee\n\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n\n    if (transactionsByEmployee) {\n      setAllTransactions(transactionsByEmployee);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, transactionsByEmployee]); // Initial effect to load all transactions if employees are not filtered\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          // bug 3 - check if the id is null or empty employee\n          if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n            // bug three --- load if empty\n            await loadAllTransactions();\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: transactions === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampLoading--container\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            \"data-testid\": \"transaction-container\",\n            children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n              transaction: transaction,\n              loading: false,\n              setTransactionApproval: function (params) {\n                throw new Error(\"Function not implemented.\");\n              }\n            }, transaction.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"RampButton\",\n            disabled: paginatedTransactionsUtils.loading,\n            onClick: async () => {\n              await loadAllTransactions(); // Load more transactions when button clicked\n            },\n            children: \"View More\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Pt4IgvPyp/Y9mQ1ItXpuNPGmdRg=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","TransactionPane","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","transactions","length","loadAllTransactions","invalidateData","fetchAll","newTransactions","prevTransactions","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue","map","transaction","params","Error","nextPage"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\nimport { TransactionPane } from \"./components/Transactions/TransactionPane\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([]);\n\n  // UseMemo to derive transactions from accumulated data\n  const transactions = useMemo(\n    () => (allTransactions.length > 0 ? allTransactions : null),\n    [allTransactions]\n  );\n\n  // Load all transactions initially and on View More\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await paginatedTransactionsUtils.fetchAll(); // Fetch the next page of transactions\n\n    const newTransactions = paginatedTransactions?.data;\n\n    if (newTransactions) {\n      setAllTransactions((prevTransactions) => [\n        ...prevTransactions,\n        ...newTransactions,\n      ]);\n    }\n\n    setIsLoading(false);\n  }, [paginatedTransactions, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  // Load transactions by employee\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      setAllTransactions([]); // Clear the list when filtering by employee\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n\n      if (transactionsByEmployee) {\n        setAllTransactions(transactionsByEmployee);\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils, transactionsByEmployee]\n  );\n\n  // Initial effect to load all transactions if employees are not filtered\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            // bug 3 - check if the id is null or empty employee\n            if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n              // bug three --- load if empty\n              await loadAllTransactions();\n              return;\n            }\n\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {transactions === null ? (\n            <div className=\"RampLoading--container\">Loading...</div>\n          ) : (\n            <Fragment>\n              <div data-testid=\"transaction-container\">\n                {transactions.map((transaction) => (\n                  <TransactionPane key={transaction.id} transaction={transaction} loading={false} setTransactionApproval={function (params: { transactionId: string; newValue: boolean }): Promise<void> {\n                    throw new Error(\"Function not implemented.\")\n                  } } />\n                ))}\n              </div>\n              {paginatedTransactions?.nextPage && (\n                <button\n                  className=\"RampButton\"\n                  disabled={paginatedTransactionsUtils.loading}\n                  onClick={async () => {\n                    await loadAllTransactions(); // Load more transactions when button clicked\n                  }}\n                >\n                  View More\n                </button>\n              )}\n            </Fragment>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}