{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useState, useEffect } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const [localTransactions, setLocalTransactions] = useState(transactions);\n  const [error, setError] = useState(null); // Sync local transactions with the incoming prop\n\n  useEffect(() => {\n    setLocalTransactions(transactions);\n  }, [transactions]);\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    // Optimistic UI update\n    setLocalTransactions(prevTransactions => prevTransactions.map(transaction => transaction.id === transactionId ? { ...transaction,\n      approved: newValue\n    } : transaction));\n\n    try {\n      // Backend call to update transaction approval\n      await fetchWithoutCache(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue\n      });\n      setError(null); // Clear any previous errors if the call succeeds\n    } catch (error) {\n      console.error(\"Failed to update transaction approval:\", error);\n      setError(\"Failed to update transaction approval. Please try again.\"); // Rollback to previous state on error\n\n      setLocalTransactions(prevTransactions => prevTransactions.map(transaction => transaction.id === transactionId ? { ...transaction,\n        approved: !newValue\n      } : transaction));\n    }\n  }, [fetchWithoutCache]);\n\n  if (localTransactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this), localTransactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"P4eLHgPIR6FQRqKwGqoy0or0FeU=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useState","useEffect","useCustomFetch","TransactionPane","Transactions","transactions","fetchWithoutCache","loading","localTransactions","setLocalTransactions","error","setError","setTransactionApproval","transactionId","newValue","prevTransactions","map","transaction","id","approved","value","console"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCallback, useState, useEffect } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { SetTransactionApprovalParams } from \"src/utils/types\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\";\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch();\n  const [localTransactions, setLocalTransactions] = useState(transactions);\n  const [error, setError] = useState<string | null>(null);\n\n  // Sync local transactions with the incoming prop\n  useEffect(() => {\n    setLocalTransactions(transactions);\n  }, [transactions]);\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      // Optimistic UI update\n      setLocalTransactions((prevTransactions) =>\n        prevTransactions!.map((transaction) =>\n          transaction.id === transactionId ? { ...transaction, approved: newValue } : transaction\n        )\n      );\n\n      try {\n        // Backend call to update transaction approval\n        await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n          transactionId,\n          value: newValue,\n        });\n        setError(null); // Clear any previous errors if the call succeeds\n      } catch (error) {\n        console.error(\"Failed to update transaction approval:\", error);\n        setError(\"Failed to update transaction approval. Please try again.\");\n\n        // Rollback to previous state on error\n        setLocalTransactions((prevTransactions) =>\n          prevTransactions!.map((transaction) =>\n            transaction.id === transactionId ? { ...transaction, approved: !newValue } : transaction\n          )\n        );\n      }\n    },\n    [fetchWithoutCache]\n  );\n\n  if (localTransactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>;\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {error && <div className=\"error-message\">{error}</div>}\n      {localTransactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  );\n};"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAGA,OAAO,MAAMC,YAAmC,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EACvE,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCL,cAAc,EAArD;EACA,MAAM,CAACM,iBAAD,EAAoBC,oBAApB,IAA4CT,QAAQ,CAACK,YAAD,CAA1D;EACA,MAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAgB,IAAhB,CAAlC,CAHuE,CAKvE;;EACAC,SAAS,CAAC,MAAM;IACdQ,oBAAoB,CAACJ,YAAD,CAApB;EACD,CAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;EAIA,MAAMO,sBAAsB,GAAGb,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEc,aAAF;MAAiBC;IAAjB,CAAgC;IACrC;IACAL,oBAAoB,CAAEM,gBAAD,IACnBA,gBAAgB,CAAEC,GAAlB,CAAuBC,WAAD,IACpBA,WAAW,CAACC,EAAZ,KAAmBL,aAAnB,GAAmC,EAAE,GAAGI,WAAL;MAAkBE,QAAQ,EAAEL;IAA5B,CAAnC,GAA4EG,WAD9E,CADkB,CAApB;;IAMA,IAAI;MACF;MACA,MAAMX,iBAAiB,CAAqC,wBAArC,EAA+D;QACpFO,aADoF;QAEpFO,KAAK,EAAEN;MAF6E,CAA/D,CAAvB;MAIAH,QAAQ,CAAC,IAAD,CAAR,CANE,CAMc;IACjB,CAPD,CAOE,OAAOD,KAAP,EAAc;MACdW,OAAO,CAACX,KAAR,CAAc,wCAAd,EAAwDA,KAAxD;MACAC,QAAQ,CAAC,0DAAD,CAAR,CAFc,CAId;;MACAF,oBAAoB,CAAEM,gBAAD,IACnBA,gBAAgB,CAAEC,GAAlB,CAAuBC,WAAD,IACpBA,WAAW,CAACC,EAAZ,KAAmBL,aAAnB,GAAmC,EAAE,GAAGI,WAAL;QAAkBE,QAAQ,EAAE,CAACL;MAA7B,CAAnC,GAA6EG,WAD/E,CADkB,CAApB;IAKD;EACF,CA3BuC,EA4BxC,CAACX,iBAAD,CA5BwC,CAA1C;;EA+BA,IAAIE,iBAAiB,KAAK,IAA1B,EAAgC;IAC9B,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,WACGE,KAAK,iBAAI;MAAK,SAAS,EAAC,eAAf;MAAA,UAAgCA;IAAhC;MAAA;MAAA;MAAA;IAAA,QADZ,EAEGF,iBAAiB,CAACQ,GAAlB,CAAuBC,WAAD,iBACrB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAEV,OAHX;MAIE,sBAAsB,EAAEK;IAJ1B,GACOK,WAAW,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADD,CAFH;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD,CA1DM;;GAAMd,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}