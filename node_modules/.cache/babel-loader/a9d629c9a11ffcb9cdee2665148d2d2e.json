{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactions, setTransactions] = useState([]); // Load all transactions (including pagination)\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData(); // Clear previous employee-specific data\n\n    await employeeUtils.fetchAll(); // Fetch all employees\n\n    setIsLoading(false);\n    const newPaginatedTransactions = await paginatedTransactionsUtils.fetchAll();\n\n    if (newPaginatedTransactions !== null && newPaginatedTransactions !== void 0 && newPaginatedTransactions.data) {\n      setTransactions(prevTransactions => [...prevTransactions, ...newPaginatedTransactions.data]);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]); // Load transactions filtered by employee\n\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData(); // Clear previous paginated transactions\n\n    setTransactions([]); // Clear transactions when filtering by employee\n\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n\n    if (transactionsByEmployee) {\n      setTransactions(transactionsByEmployee);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, transactionsByEmployee]); // Load all transactions when component mounts\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), transactions !== null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) == null,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"1GMiyFFNBlIpcaEQxoVHd3Q36os=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","setTransactions","loadAllTransactions","invalidateData","fetchAll","newPaginatedTransactions","prevTransactions","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [transactions, setTransactions] = useState([]);\n\n  // Load all transactions (including pagination)\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData(); // Clear previous employee-specific data\n\n    await employeeUtils.fetchAll(); // Fetch all employees\n    setIsLoading(false);\n\n    const newPaginatedTransactions = await paginatedTransactionsUtils.fetchAll();\n    if (newPaginatedTransactions?.data) {\n      setTransactions((prevTransactions) => [\n        ...prevTransactions,\n        ...newPaginatedTransactions.data,\n      ]);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  // Load transactions filtered by employee\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId) => {\n      paginatedTransactionsUtils.invalidateData(); // Clear previous paginated transactions\n      setTransactions([]); // Clear transactions when filtering by employee\n\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n      if (transactionsByEmployee) {\n        setTransactions(transactionsByEmployee);\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils, transactionsByEmployee]\n  );\n\n  // Load all transactions when component mounts\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions();\n            } else {\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading || paginatedTransactions?.nextPage == null}\n              onClick={async () => {\n                await loadAllTransactions();\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}