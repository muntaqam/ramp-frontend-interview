{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch();\n  const [localTransactions, setLocalTransactions] = useState(transactions);\n  const [approvedStatusMap, setApprovedStatusMap] = useState({}); // Function to reload transactions from the backend\n\n  const reloadTransactions = useCallback(async () => {\n    console.log(\"Reloading transactions...\");\n\n    try {\n      const latestTransactions = await fetchWithoutCache(\"getTransactions\");\n      setLocalTransactions(latestTransactions);\n      console.log(\"Transactions reloaded:\", latestTransactions);\n    } catch (error) {\n      console.error(\"Failed to reload transactions:\", error);\n    }\n  }, [fetchWithoutCache]); // Sync localTransactions with incoming transactions prop\n\n  useEffect(() => {\n    setLocalTransactions(transactions);\n  }, [transactions]);\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    console.log(`setTransactionApproval called with transactionId=${transactionId}, newValue=${newValue}`); // Update approvedStatusMap\n\n    setApprovedStatusMap(prevStatusMap => ({ ...prevStatusMap,\n      [transactionId]: newValue\n    }));\n\n    try {\n      // Send update to the backend\n      console.log(\"Sending backend update request...\");\n      await fetchWithoutCache(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue\n      });\n      console.log(\"Backend update succeeded for transactionId:\", transactionId); // Optionally reload transactions from the server if you want to refresh all data\n      // await reloadTransactions();\n    } catch (error) {\n      console.error(\"Failed to update transaction approval:\", error); // Rollback if the request fails\n\n      setApprovedStatusMap(prevStatusMap => ({ ...prevStatusMap,\n        [transactionId]: !newValue\n      }));\n    }\n  }, [fetchWithoutCache]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: localTransactions.map(transaction => {\n      var _approvedStatusMap$tr;\n\n      return /*#__PURE__*/_jsxDEV(TransactionPane, {\n        transaction: { ...transaction,\n          approved: (_approvedStatusMap$tr = approvedStatusMap[transaction.id]) !== null && _approvedStatusMap$tr !== void 0 ? _approvedStatusMap$tr : transaction.approved // Override with the map value if it exists\n\n        },\n        loading: loading,\n        setTransactionApproval: setTransactionApproval\n      }, transaction.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"OraHLkyUpml95spPXaZnjxqxKMs=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useState","useEffect","useCallback","useCustomFetch","TransactionPane","Transactions","transactions","fetchWithoutCache","loading","localTransactions","setLocalTransactions","approvedStatusMap","setApprovedStatusMap","reloadTransactions","console","log","latestTransactions","error","setTransactionApproval","transactionId","newValue","prevStatusMap","value","map","transaction","approved","id"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalParams } from \"src/utils/types\";\nimport { TransactionsComponent, SetTransactionApprovalFunction } from \"./types\";\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch();\n  const [localTransactions, setLocalTransactions] = useState(transactions);\n  const [approvedStatusMap, setApprovedStatusMap] = useState<{ [id: string]: boolean }>({});\n\n  // Function to reload transactions from the backend\n  const reloadTransactions = useCallback(async () => {\n    console.log(\"Reloading transactions...\");\n    try {\n      const latestTransactions = await fetchWithoutCache(\"getTransactions\");\n      setLocalTransactions(latestTransactions);\n      console.log(\"Transactions reloaded:\", latestTransactions);\n    } catch (error) {\n      console.error(\"Failed to reload transactions:\", error);\n    }\n  }, [fetchWithoutCache]);\n\n  // Sync localTransactions with incoming transactions prop\n  useEffect(() => {\n    setLocalTransactions(transactions);\n  }, [transactions]);\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      console.log(`setTransactionApproval called with transactionId=${transactionId}, newValue=${newValue}`);\n\n      // Update approvedStatusMap\n      setApprovedStatusMap((prevStatusMap) => ({\n        ...prevStatusMap,\n        [transactionId]: newValue,\n      }));\n\n      try {\n        // Send update to the backend\n        console.log(\"Sending backend update request...\");\n        await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n          transactionId,\n          value: newValue,\n        });\n        console.log(\"Backend update succeeded for transactionId:\", transactionId);\n\n        // Optionally reload transactions from the server if you want to refresh all data\n        // await reloadTransactions();\n      } catch (error) {\n        console.error(\"Failed to update transaction approval:\", error);\n        // Rollback if the request fails\n        setApprovedStatusMap((prevStatusMap) => ({\n          ...prevStatusMap,\n          [transactionId]: !newValue,\n        }));\n      }\n    },\n    [fetchWithoutCache]\n  );\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {localTransactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={{\n            ...transaction,\n            approved: approvedStatusMap[transaction.id] ?? transaction.approved, // Override with the map value if it exists\n          }}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAIA,OAAO,MAAMC,YAAmC,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EACvE,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCL,cAAc,EAArD;EACA,MAAM,CAACM,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAACM,YAAD,CAA1D;EACA,MAAM,CAACK,iBAAD,EAAoBC,oBAApB,IAA4CZ,QAAQ,CAA4B,EAA5B,CAA1D,CAHuE,CAKvE;;EACA,MAAMa,kBAAkB,GAAGX,WAAW,CAAC,YAAY;IACjDY,OAAO,CAACC,GAAR,CAAY,2BAAZ;;IACA,IAAI;MACF,MAAMC,kBAAkB,GAAG,MAAMT,iBAAiB,CAAC,iBAAD,CAAlD;MACAG,oBAAoB,CAACM,kBAAD,CAApB;MACAF,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,kBAAtC;IACD,CAJD,CAIE,OAAOC,KAAP,EAAc;MACdH,OAAO,CAACG,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;IACD;EACF,CATqC,EASnC,CAACV,iBAAD,CATmC,CAAtC,CANuE,CAiBvE;;EACAN,SAAS,CAAC,MAAM;IACdS,oBAAoB,CAACJ,YAAD,CAApB;EACD,CAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;EAIA,MAAMY,sBAAsB,GAAGhB,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEiB,aAAF;MAAiBC;IAAjB,CAAgC;IACrCN,OAAO,CAACC,GAAR,CAAa,oDAAmDI,aAAc,cAAaC,QAAS,EAApG,EADqC,CAGrC;;IACAR,oBAAoB,CAAES,aAAD,KAAoB,EACvC,GAAGA,aADoC;MAEvC,CAACF,aAAD,GAAiBC;IAFsB,CAApB,CAAD,CAApB;;IAKA,IAAI;MACF;MACAN,OAAO,CAACC,GAAR,CAAY,mCAAZ;MACA,MAAMR,iBAAiB,CAAqC,wBAArC,EAA+D;QACpFY,aADoF;QAEpFG,KAAK,EAAEF;MAF6E,CAA/D,CAAvB;MAIAN,OAAO,CAACC,GAAR,CAAY,6CAAZ,EAA2DI,aAA3D,EAPE,CASF;MACA;IACD,CAXD,CAWE,OAAOF,KAAP,EAAc;MACdH,OAAO,CAACG,KAAR,CAAc,wCAAd,EAAwDA,KAAxD,EADc,CAEd;;MACAL,oBAAoB,CAAES,aAAD,KAAoB,EACvC,GAAGA,aADoC;QAEvC,CAACF,aAAD,GAAiB,CAACC;MAFqB,CAApB,CAAD,CAApB;IAID;EACF,CA7BuC,EA8BxC,CAACb,iBAAD,CA9BwC,CAA1C;EAiCA,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGE,iBAAiB,CAACc,GAAlB,CAAuBC,WAAD;MAAA;;MAAA,oBACrB,QAAC,eAAD;QAEE,WAAW,EAAE,EACX,GAAGA,WADQ;UAEXC,QAAQ,2BAAEd,iBAAiB,CAACa,WAAW,CAACE,EAAb,CAAnB,yEAAuCF,WAAW,CAACC,QAFhD,CAE0D;;QAF1D,CAFf;QAME,OAAO,EAAEjB,OANX;QAOE,sBAAsB,EAAEU;MAP1B,GACOM,WAAW,CAACE,EADnB;QAAA;QAAA;QAAA;MAAA,QADqB;IAAA,CAAtB;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CAtEM;;GAAMrB,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}