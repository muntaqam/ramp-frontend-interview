{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch(); // No need for localApprovals state\n\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n\n    try {\n      //  backend update call\n      await fetchWithoutCache(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue\n      }); // Update the local state \n\n      setLocalTransactions(prevTransactions => {\n        if (!prevTransactions) {\n          return [];\n        }\n\n        return prevTransactions.map(transaction => transaction.id === transactionId ? { ...transaction,\n          approved: newValue\n        } : transaction);\n      });\n    } catch (error) {\n      console.error(\"Failed to update transaction approval:\", error);\n    }\n  }, [fetchWithoutCache]);\n\n  if (localTransactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: localTransactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"3TeCR/OJhEdaHp00JQf6jBdD3oc=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useCustomFetch","TransactionPane","Transactions","transactions","fetchWithoutCache","loading","setTransactionApproval","transactionId","newValue","value","setLocalTransactions","prevTransactions","map","transaction","id","approved","error","console","localTransactions"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCallback, useState, useEffect } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { SetTransactionApprovalParams } from \"src/utils/types\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\";\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch();\n\n  // No need for localApprovals state\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      try {\n        //  backend update call\n        await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n          transactionId,\n          value: newValue,\n        });\n\n        // Update the local state \n        setLocalTransactions((prevTransactions) => {\n          if (!prevTransactions) {\n            return [];\n          }\n          return prevTransactions.map((transaction) =>\n            transaction.id === transactionId ? { ...transaction, approved: newValue } : transaction\n          );\n        });\n      } catch (error) {\n        console.error(\"Failed to update transaction approval:\", error);\n      }\n    },\n    [fetchWithoutCache]\n  );\n\n  if (localTransactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>;\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {localTransactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  );\n};"],"mappings":";;;AAAA,SAASA,WAAT,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAGA,OAAO,MAAMC,YAAmC,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EACvE,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCL,cAAc,EAArD,CADuE,CAGvE;;EAEA,MAAMM,sBAAsB,GAAGP,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEQ,aAAF;MAAiBC;IAAjB,CAAgC;;IACrC,IAAI;MACF;MACA,MAAMJ,iBAAiB,CAAqC,wBAArC,EAA+D;QACpFG,aADoF;QAEpFE,KAAK,EAAED;MAF6E,CAA/D,CAAvB,CAFE,CAOF;;MACAE,oBAAoB,CAAEC,gBAAD,IAAsB;QACzC,IAAI,CAACA,gBAAL,EAAuB;UACrB,OAAO,EAAP;QACD;;QACD,OAAOA,gBAAgB,CAACC,GAAjB,CAAsBC,WAAD,IAC1BA,WAAW,CAACC,EAAZ,KAAmBP,aAAnB,GAAmC,EAAE,GAAGM,WAAL;UAAkBE,QAAQ,EAAEP;QAA5B,CAAnC,GAA4EK,WADvE,CAAP;MAGD,CAPmB,CAApB;IAQD,CAhBD,CAgBE,OAAOG,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAc,wCAAd,EAAwDA,KAAxD;IACD;EACF,CArBuC,EAsBxC,CAACZ,iBAAD,CAtBwC,CAA1C;;EAyBA,IAAIc,iBAAiB,KAAK,IAA1B,EAAgC;IAC9B,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGA,iBAAiB,CAACN,GAAlB,CAAuBC,WAAD,iBACrB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAER,OAHX;MAIE,sBAAsB,EAAEC;IAJ1B,GACOO,WAAW,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA9CM;;GAAMZ,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}