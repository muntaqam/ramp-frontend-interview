{"ast":null,"code":"var _jsxFileName = \"/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false); // Store accumulated transactions in state\n\n  const [accumulatedTransactions, setAccumulatedTransactions] = useState(null);\n  const transactions = useMemo(() => {\n    if (transactionsByEmployee) {\n      return transactionsByEmployee;\n    } else if (paginatedTransactions) {\n      var _ref;\n\n      return (_ref = accumulatedTransactions !== null && accumulatedTransactions !== void 0 ? accumulatedTransactions : paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _ref !== void 0 ? _ref : null;\n    } else {\n      return null;\n    }\n  }, [paginatedTransactions, transactionsByEmployee, accumulatedTransactions]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n    const newPaginatedTransactions = await paginatedTransactionsUtils.fetchAll();\n    setAccumulatedTransactions(prevTransactions => {\n      var _newPaginatedTransact;\n\n      return prevTransactions && newPaginatedTransactions !== null && newPaginatedTransactions !== void 0 && newPaginatedTransactions.data ? [...prevTransactions, ...newPaginatedTransactions.data] : (_newPaginatedTransact = newPaginatedTransactions === null || newPaginatedTransactions === void 0 ? void 0 : newPaginatedTransactions.data) !== null && _newPaginatedTransact !== void 0 ? _newPaginatedTransact : null;\n    });\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    setAccumulatedTransactions(null); // Clear accumulated transactions when filtering by employee\n\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n            await loadAllTransactions();\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), transactions !== null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) == null,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"kTKIzelgee+2VnT8Hwu8bEp5F2U=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","accumulatedTransactions","setAccumulatedTransactions","transactions","loadAllTransactions","invalidateData","fetchAll","newPaginatedTransactions","prevTransactions","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Store accumulated transactions in state\n  const [accumulatedTransactions, setAccumulatedTransactions] = useState(null);\n\n  const transactions = useMemo(() => {\n    if (transactionsByEmployee) {\n      return transactionsByEmployee;\n    } else if (paginatedTransactions) {\n      return accumulatedTransactions ?? paginatedTransactions?.data ?? null;\n    } else {\n      return null;\n    }\n  }, [paginatedTransactions, transactionsByEmployee, accumulatedTransactions]);\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    setIsLoading(false);\n\n    const newPaginatedTransactions = await paginatedTransactionsUtils.fetchAll();\n    setAccumulatedTransactions((prevTransactions) => {\n      return prevTransactions && newPaginatedTransactions?.data\n        ? [...prevTransactions, ...newPaginatedTransactions.data]\n        : newPaginatedTransactions?.data ?? null;\n    });\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId) => {\n      paginatedTransactionsUtils.invalidateData();\n      setAccumulatedTransactions(null); // Clear accumulated transactions when filtering by employee\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: item === EMPTY_EMPLOYEE ? \"All Employees\" : `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n              await loadAllTransactions();\n              return;\n            }\n\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading || paginatedTransactions?.nextPage == null}\n              onClick={async () => {\n                await loadAllTransactions();\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}