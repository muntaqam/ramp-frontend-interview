{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n\n    const updateTransactionApproval = (transactionId, newValue) => {\n      setPaginatedTransactions(prevData => {\n        if (!prevData) return prevData;\n        return { ...prevData,\n          data: prevData.data.map(transaction => transaction.id === transactionId ? { ...transaction,\n            approved: newValue\n          } : transaction)\n        };\n      });\n    };\n\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      if (previousResponse === null) {\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    updateTransactionApproval\n  };\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","updateTransactionApproval","transactionId","newValue","prevData","data","map","transaction","id","approved","previousResponse","invalidateData"],"sources":["/Users/muntaqamaahi/onlineasssements/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    const updateTransactionApproval = (transactionId: string, newValue: boolean) => {\n      setPaginatedTransactions((prevData) => {\n        if (!prevData) return prevData;\n        return {\n          ...prevData,\n          data: prevData.data.map((transaction) =>\n            transaction.id === transactionId ? { ...transaction, approved: newValue } : transaction\n          ),\n        };\n      });\n    };\n\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n      if (previousResponse === null) {\n        return response\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage,\n      }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, updateTransactionApproval };\n return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADnE,CAFmC,CAArC;;IAOA,MAAMC,yBAAyB,GAAG,CAACC,aAAD,EAAwBC,QAAxB,KAA8C;MAC9EP,wBAAwB,CAAEQ,QAAD,IAAc;QACrC,IAAI,CAACA,QAAL,EAAe,OAAOA,QAAP;QACf,OAAO,EACL,GAAGA,QADE;UAELC,IAAI,EAAED,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAmBC,WAAD,IACtBA,WAAW,CAACC,EAAZ,KAAmBN,aAAnB,GAAmC,EAAE,GAAGK,WAAL;YAAkBE,QAAQ,EAAEN;UAA5B,CAAnC,GAA4EI,WADxE;QAFD,CAAP;MAMD,CARuB,CAAxB;IASD,CAVD;;IAaAX,wBAAwB,CAAEc,gBAAD,IAAsB;MAC7C,IAAIZ,QAAQ,KAAK,IAAb,IAAqBY,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOZ,QAAP;MACD;;MACD,IAAIY,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B,OAAOZ,QAAP;MACD;;MAED,OAAO;QACLO,IAAI,EAAE,CAAC,GAAGK,gBAAgB,CAACL,IAArB,EAA2B,GAAGP,QAAQ,CAACO,IAAvC,CADD;QAELL,QAAQ,EAAEF,QAAQ,CAACE;MAFd,CAAP;IAID,CAZuB,CAAxB;EAaD,CAlC2B,EAkCzB,CAACP,cAAD,EAAiBE,qBAAjB,CAlCyB,CAA5B;EAoCA,MAAMgB,cAAc,GAAGtB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAGA,OAAO;IAAES,IAAI,EAAEV,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDc,cAAlD;IAAkEV;EAAlE,CAAP;EACD,OAAO;IAAEI,IAAI,EAAEV,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDc;EAAlD,CAAP;AACA;;GA/CenB,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}